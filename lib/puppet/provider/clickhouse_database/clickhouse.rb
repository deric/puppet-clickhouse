require File.expand_path(File.join(File.dirname(__FILE__), '..', 'clickhouse'))
Puppet::Type.type(:clickhouse_database).provide(:clickhouse, parent: Puppet::Provider::Clickhouse) do
  desc 'Manages Clickhouse databases.'

  commands clickhouse_raw: 'clickhouse-client'

  def self.instances
    clickhouse_caller('show databases').split("\n").map do |name|
      new(name:,
          ensure: :present)
    end
  end

  # We iterate over each clickhouse_database entry in the catalog and compare it against
  # the contents of the property_hash generated by self.instances
  def self.prefetch(resources)
    databases = instances
    resources.each_key do |database|
      provider = databases.find { |db| db.name == database }
      resources[database].provider = provider if provider
    end
  end

  def create
    self.class.clickhouse_caller("create database if not exists `#{@resource[:name]}`")

    @property_hash[:ensure] = :present

    exists? ? (return true) : (return false)
  end

  def destroy
    self.class.clickhouse_caller("drop database if exists `#{@resource[:name]}`")

    @property_hash.clear
    exists? ? (return false) : (return true)
  end

  def exists?
    @property_hash[:ensure] == :present || false
  end

  mk_resource_methods
end
